{
  "title": "A Heterogeneous Parallel Framework for Domain-Specific Languages",
  "type": "conference_proceedings",
  "authors": [
    {
      "first_name": "Kevin J.",
      "last_name": "Brown"
    },
    {
      "first_name": "Arvind K.",
      "last_name": "Sujeeth"
    },
    {
      "first_name": "Hyouk Joong",
      "last_name": "Lee"
    },
    {
      "first_name": "Tiark",
      "last_name": "Rompf"
    },
    {
      "first_name": "Hassan",
      "last_name": "Chafi"
    },
    {
      "first_name": "Martin",
      "last_name": "Odersky"
    },
    {
      "first_name": "Kunle",
      "last_name": "Olukotun"
    }
  ],
  "year": 2011,
  "source": "2011 International Conference on Parallel Architectures and Compilation Techniques",
  "identifiers": {
    "doi": "10.1109/PACT.2011.15",
    "isbn": "978-1-4577-1794-9"
  },
  "pages": "89-100",
  "websites": [
    "http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=6113791",
    "http://webdav.spamihilator.com/mendeley/06113791.pdf"
  ],
  "month": 10,
  "publisher": "IEEE",
  "id": "a4fef85e-65be-30b7-b38a-4eb676d6438c",
  "created": "2012-01-07T15:23:30.000Z",
  "accessed": "2012-01-07",
  "file_attached": false,
  "profile_id": "37b62785-c736-3e4c-9cd5-ded1c9f91b27",
  "last_modified": "2013-08-30T21:19:05.000Z",
  "read": false,
  "starred": false,
  "authored": false,
  "confirmed": true,
  "hidden": false,
  "citation_key": "Brown2011",
  "abstract": "Computing systems are becoming increasingly parallel and heterogeneous, and therefore new applications must be capable of exploiting parallelism in order to continue achieving high performance. However, targeting these emerging devices often requires using multiple disparate programming models and making decisions that can limit forward scalability. In previous work we proposed the use of domain-specific languages (DSLs) to provide high-level abstractions that enable transformations to high performance parallel code without degrading programmer productivity. In this paper we present a new end-to-end system for building, compiling, and executing DSL applications on parallel heterogeneous hardware, the Delite Compiler Framework and Runtime. The framework lifts embedded DSL applications to an intermediate representation (IR), performs generic, parallel, and domain-specific optimizations, and generates an execution graph that targets multiple heterogeneous hardware devices. Finally we present results comparing the performance of several machine learning applications written in OptiML, a DSL for machine learning that utilizes Delite, to C++ and MATLAB implementations. We find that the implicitly parallel OptiML applications achieve single-threaded performance comparable to C++ and outperform explicitly parallel MATLAB in nearly all cases."
}